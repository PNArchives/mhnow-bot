// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const findHuntableMontersWithGuild = `-- name: FindHuntableMontersWithGuild :many
SELECT
    pm.rank,
    pm.disappear_at,
    pm.location,
    h.id as hunter_id,
    h.name as hunter_name,
    m.id as monster_id,
    m.jp_name as monster_jp_name,
    m.en_name as monster_en_name
FROM painted_monster pm
INNER JOIN hunter h ON pm.hunter_id = h.id
INNER JOIN monster m ON pm.monster_id = m.id
WHERE
    pm.disappear_at > CURRENT_TIMESTAMP
ORDER BY pm.disappear_at
`

type FindHuntableMontersWithGuildRow struct {
	Rank          int16
	DisappearAt   time.Time
	Location      sql.NullString
	HunterID      string
	HunterName    string
	MonsterID     string
	MonsterJpName string
	MonsterEnName string
}

func (q *Queries) FindHuntableMontersWithGuild(ctx context.Context) ([]FindHuntableMontersWithGuildRow, error) {
	rows, err := q.db.QueryContext(ctx, findHuntableMontersWithGuild)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindHuntableMontersWithGuildRow
	for rows.Next() {
		var i FindHuntableMontersWithGuildRow
		if err := rows.Scan(
			&i.Rank,
			&i.DisappearAt,
			&i.Location,
			&i.HunterID,
			&i.HunterName,
			&i.MonsterID,
			&i.MonsterJpName,
			&i.MonsterEnName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHunter = `-- name: GetHunter :one
SELECT id, name, display_name
FROM hunter
WHERE id = $1
`

func (q *Queries) GetHunter(ctx context.Context, id string) (Hunter, error) {
	row := q.db.QueryRowContext(ctx, getHunter, id)
	var i Hunter
	err := row.Scan(&i.ID, &i.Name, &i.DisplayName)
	return i, err
}

const joinGuild = `-- name: JoinGuild :exec
INSERT INTO guild_member (
    guild_id,
    hunter_id,
    nick_name
) VALUES (
    $1, $2, $3
)
`

type JoinGuildParams struct {
	GuildID  string
	HunterID string
	NickName sql.NullString
}

func (q *Queries) JoinGuild(ctx context.Context, arg JoinGuildParams) error {
	_, err := q.db.ExecContext(ctx, joinGuild, arg.GuildID, arg.HunterID, arg.NickName)
	return err
}

const listDiscoverableMonsters = `-- name: ListDiscoverableMonsters :many
SELECT id, jp_name, en_name, discoverable
FROM monster
WHERE discoverable = TRUE
`

func (q *Queries) ListDiscoverableMonsters(ctx context.Context) ([]Monster, error) {
	rows, err := q.db.QueryContext(ctx, listDiscoverableMonsters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.JpName,
			&i.EnName,
			&i.Discoverable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paintMonster = `-- name: PaintMonster :one
INSERT INTO painted_monster (
    rank,
    hunter_id,
    monster_id,
    disappear_at,
    location
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, rank, hunter_id, monster_id, disappear_at, location
`

type PaintMonsterParams struct {
	Rank        int16
	HunterID    string
	MonsterID   string
	DisappearAt time.Time
	Location    sql.NullString
}

func (q *Queries) PaintMonster(ctx context.Context, arg PaintMonsterParams) (PaintedMonster, error) {
	row := q.db.QueryRowContext(ctx, paintMonster,
		arg.Rank,
		arg.HunterID,
		arg.MonsterID,
		arg.DisappearAt,
		arg.Location,
	)
	var i PaintedMonster
	err := row.Scan(
		&i.ID,
		&i.Rank,
		&i.HunterID,
		&i.MonsterID,
		&i.DisappearAt,
		&i.Location,
	)
	return i, err
}

const registerGuild = `-- name: RegisterGuild :one
INSERT INTO guild (
    id,
    name
) VALUES (
    $1, $2
)
RETURNING id, name
`

type RegisterGuildParams struct {
	ID   string
	Name sql.NullString
}

func (q *Queries) RegisterGuild(ctx context.Context, arg RegisterGuildParams) (Guild, error) {
	row := q.db.QueryRowContext(ctx, registerGuild, arg.ID, arg.Name)
	var i Guild
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const registerHunter = `-- name: RegisterHunter :one
INSERT INTO hunter (
    id,
    name,
    display_name
) VALUES (
    $1, $2, $3
)
RETURNING id, name, display_name
`

type RegisterHunterParams struct {
	ID          string
	Name        string
	DisplayName sql.NullString
}

func (q *Queries) RegisterHunter(ctx context.Context, arg RegisterHunterParams) (Hunter, error) {
	row := q.db.QueryRowContext(ctx, registerHunter, arg.ID, arg.Name, arg.DisplayName)
	var i Hunter
	err := row.Scan(&i.ID, &i.Name, &i.DisplayName)
	return i, err
}
